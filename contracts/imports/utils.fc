cell assemble_stateinit(cell code, cell data) inline {
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(code)
        .store_dict(data)
        .store_uint(0, 1)
    .end_cell();
}

builder calculate_address_from_stateinit(int wc, cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256);
}

() force_chain(int wc, slice address) impure inline {
    (int address_wc, _) = parse_std_addr(address);
    throw_if(error::invalid_workchain, address_wc != wc);
}

() reply(int query_id, slice sender_addr) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::excesses, 32)
        .store_uint(query_id, 64);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_addr)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_builder(msg_body)
    .end_cell();
    send_raw_message(msg, 64);
}

() reply_init(int query_id, slice sender_addr) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::excesses, 32)
        .store_uint(query_id, 64);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_addr)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_builder(msg_body)
    .end_cell();
    send_raw_message(msg, 128);
}
#include "imports/stdlib.fc";
#include "imports/op_codes/subscription.fc";
#include "imports/op_codes/walletv4.fc";
#include "imports/errors/subscription.fc";
#include "imports/utils.fc";


;; Title: Agora Service Subscription
;; Author: Yuri Fernandes (0xyuri.ton)
;; Description: Subtract subscription fees from owner wallet

;; Storage variables

global slice storage::subscription_master;
global slice storage::owner;
global slice storage::manager;
global int storage::fee;
global int storage::period;
global int storage::activation_fee;
global int storage::last_paid;
global int storage::activated?;

;; Constants
const int MIN_TON_RESERVE = 50000000;

;; Auxiliary functions
int payment_due?() inline {
    return now() - storage::last_paid >= storage::period;
}

cell assemble_request_funds_msg(int query_id, int toncoins, cell extra) {
    return begin_cell()
        .store_uint(0x18, 6)
        .store_slice(storage::owner)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::request_funds, 32)
        .store_uint(query_id, 64)
        .store_coins(toncoins)
    .end_cell();
}

cell assemble_collect_fee_msg(int query_id) inline {
    return begin_cell()
        .store_uint(0x18, 6)
        .store_slice(storage::manager)
        .store_coins(storage::activation_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::subscription_fee_transfer, 32)
        .store_uint(query_id, 64)
        .store_slice(storage::owner)
    .end_cell();
}

;; Internal Messages
() collect_subscription_fee(int query_id, int remaining_msg_value) inline {
    throw_if(error::insufficient_funds, remaining_msg_value < storage::activation_fee);
    send_raw_message(assemble_collect_fee_msg(subscriber_addr, query_id, storage::subscription_fee), 1);
}

;; Storage (C4) manipulation functions
() load_init_data() inline {
    var ds = get_data().begin_parse();
    storage::subscription_master = ds~load_msg_addr();
    storage::owner = ds~load_msg_addr();
    throw_unless(error::init_true, ds.slice_empty?());
}

() load_data() inline {
    var ds = get_data();
    storage::subscription_master = ds~load_msg_addr();
    storage::owner = ds~load_msg_addr();
    throw_if(error::init_false, ds.slice_empty?());
    storage::manager = ds~load_msg_addr();
    storage::activation_fee = ds~load_coins();
    storage::fee = ds~load_coins();
    storage::period = ds~load_uint(32);
    storage::last_paid = ds~load_uint(32);
    storage::activated? = ds~load_uint(1);
}

() save_data() inline {
    set_data(begin_cell()
        .stora_slice(storage::subscription_master)
        .store_slice(storage::owner)
        .store_slice(storage::manager)
        .store_coins(storage::activation_fee)
        .store_coins(storage::fee)
        .store_uint(storage::period, 32)
        .store_uint(storage::last_paid, 32)
        .store_uint(storage::activated?, 1)
    .end_cell());
}

;; OP functions
() init(slice sender_addr, int query_id, slice msg_body_content) inline {
    load_init_data();
    throw_unless(error::not_admin, sender_addr == storage::subscription_master);

    storage::manager = msg_body_content~load_msg_addr();
    storage::activation_fee = msg_body_content~load_coins();
    storage::fee = msg_body_content~load_coins();
    storage::period = msg_body_content~load_uint(32);
    storage::last_paid = now();
    storage::activated? = false;

    raw_reserve(MIN_TON_RESERVE, 0);

    reply(query_id, sender_addr);

    save_data();
}

() activate(slice sender_addr, int query_id, int remaining_msg_value) inline {
    throw_unless(error::not_owner, sender_addr == storage::owner);
    throw_if(error::activated, storage::activated?);

    ;; collect subscription fee from new user
    collect_subscription_fee(query_id, remaining_msg_value);

    storage::activated? = true;

    reply(query_id, sender_addr);

    save_data();
}

() deactivate(slice sender_addr, int query_id) inline {
    throw_unless(error::not_owner, sender_addr == storage::owner);
    throw_unless(error::not_activated, storage::activated?);

    storage::activated? = false;

    reply(query_id, sender_addr);

    save_data();
}

() update_authority(slice sender_addr, int query_id, slice msg_body_content) inline {
    throw_unless(error::not_master, sender_addr == storage::subscription_master);

    slice new_manager = msg_body_content~load_msg_addr();
    throw_if(error::no_storage_change, new_manager == storage::manager);

    storage::manager = new_manager;

    reply(query_id, sender_addr);

    save_data();
}

() request_payment(slice sender_addr, int query_id, slice msg_body_content) inline {
    throw_unless(error::not_admin, sender_addr == storage::manager);
    throw_unless(error::not_activated, storage::activated?);
    throw_unless(error::fee_period, payment_due?());

    ;; adjust `last_paid` to the beginning of the period interval
    storage::last_paid = (now() - storage::last_paid) / storage::period * storage::period + storage::last_paid;

    ;; Ignore the case that more than one period has passed, it's responsibility of the
    ;; service to execute payment requests in time.
    ;; Allow only Toncoin payments (pass empty extra dict)
    send_raw_message(assemble_request_funds_msg(query_id, storage::fee, empty_dict()), 64);

    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; receive ton transfers (simple transfer without message)
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages (just receive excedents)
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    slice sender_addr = cs~load_msg_addr();

    ;; perform op::init before `load_data`, since it still doesn't have the
    ;; full storage, so `load_data` would fail.
    if (op == op::init) {
        init(sender_addr, query_id, in_msg_body);
        return ();
    }

    load_data(); ;; load storage variables

    if (op == op::activate_subscription) {
        activate(sender_addr, query_id, msg_value);
        return ();
    }

    if (op == op::deactivate_subscription) {
        deactivate(sender_addr, query_id);
        return ();
    }

    if (op == op::update_authority) {
        update_authority(sender_addr, query_id, in_msg_body);
        return ();
    }

    if (op == op::request_payment) {
        request_payment(sender_addr, query_id, in_msg_body);
        return ();
    }

    throw(error::unknown_op);
}

(slice, slice, slice, int, int, int, int, int) get_subscription_data() method_id {
    load_data();
    return (
        storage::subscription_master,
        storage::owner,
        storage::manager,
        storage::activation_fee,
        storage::fee,
        storage::period,
        storage::last_paid,
        storage::activated?
    );
}

int get_subscription_master() method_id {
    load_data();
    return storage::subscription_master;
}

int get_subscriber() method_id {
    load_data();
    return storage::owner;
}

(int, int, int, int) get_fee_info() method_id {
    load_data();
    return (
        storage::activation_fee
        storage::fee,
        storage::last_paid,
        storage::period
    );
}

int is_payment_due() method_id {
    load_data();
    return payment_due?();
}

int is_activated() method_id {
    load_data();
    return storage::activated?;
}
#include "imports/stdlib.fc";
#include "imports/op_codes/subscription.fc";
#include "imports/errors/subscription.fc";
#include "imports/utils.fc";


;; Title: Agora Service Subscription
;; Author: Yuri Fernandes (0xyuri.ton)
;; Description: Subtract subscription fees from owner wallet

;; Storage variables

global slice storage::subscription_master;
global slice storage::owner;
global slice storage::manager;
global int storage::fee;
global int storage::period;

;; Constants
const int MIN_TON_RESERVE = 50000000;

;; Auxiliary functions

;; Storage (C4) manipulation functions
() load_init_data() inline {
    var ds = get_data().begin_parse();
    storage::subscription_master = ds~load_msg_addr();
    storage::owner = ds~load_msg_addr();
    throw_unless(error::init_true, ds.slice_empty?());
}

() load_data() inline {
    var ds = get_data();
    storage::subscription_master = ds~load_msg_addr();
    storage::owner = ds~load_msg_addr();
    storage::manager = ds~load_msg_addr();
    storage::fee = ds~load_coins();
    storage::period = ds~load_uint(32);
}

() save_data() inline {
    set_data(begin_cell()
        .stora_slice(storage::subscription_master)
        .store_slice(storage::owner)
        .store_slice(storage::manager)
        .store_coins(storage::fee)
        .store_uint(storage::period, 32)
    .end_cell());
}

;; OP functions
() init(slice sender_addr, int query_id, slice msg_body_content) inline {
    load_init_data();
    throw_unless(error::not_admin, sender_addr == storage::subscription_master);

    storage::manager = msg_body_content~load_msg_addr();
    storage::fee = msg_body_content~load_coins();
    storage::period = msg_body_content~load_uint(32);

    raw_reserve(MIN_TON_RESERVE, 0);

    reply(query_id, sender_addr);

    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; receive ton transfers (simple transfer without message)
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages (just receive excedents)
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    slice sender_addr = cs~load_msg_addr();

    ;; perform op::init before `load_data`, since it still doesn't have the
    ;; full storage, so `load_data` would fail.
    if (op == op::init) {
        init(sender_addr, query_id, in_msg_body);
        return ();
    }

    ;;load_data(); ;; load storage variables

    throw(error::unknown_op);
}
#include "imports/stdlib.fc";
#include "imports/op_codes/subscription_master.fc";
#include "imports/op_codes/subscription.fc";
#include "imports/errors/subscription_master.fc";
#include "imports/logs/subscription_master.fc";
#include "imports/utils.fc";


;; Title: Agora Subscription Master
;; Author: Yuri Fernandes (0xyuri.ton)
;; Description: Deploys subscription contracts for a specific TAM (Tokenized AI Model)

;; Storage variables

;; index: Index of the subscription master, used to retrieve already
;;  deployed contracts
;; metadata: Contains information about the subscription (service)
;; manager:
;;      - Change configurations of the SubscriptionMaster contract;
;;      - Request payments from Subscriptions and change minor settings in it.
;; subscription_number: Number of subscriptions
;; subscription_fee: Fee paid by the user on subscription
;; periodic_fee: Fee to be substract by the user periodically
;; fee_period: Fee payment interval (in seconds)
;; subscription_code: Code cell of the Subscription contract to be minted by the user
global int storage::index;
global cell storage::metadata;
global slice storage::manager;
global int storage::subscription_number;
global int storage::subscription_fee;
global int storage::periodic_fee;
global int storage::fee_period;
global cell storage::subscription_code;

;; Constants
const int WORKCHAIN_ID = 0;
const int MIN_TON_RESERVE = 50000000;

;; Auxiliary functions

cell assemble_subscription_data(int index) {
    return begin_cell()
        .store_slice(my_address())
        .store_uint(index, 64)
    .end_cell();
}

cell assemble_subscription_created_log(int query_id, int index, slice owner_addr) {
    ;;addr_extern$01 len:(## 9) external_address:(bits len) = MsgAddressExt;
    builder log_addr = begin_cell()
        .store_uint(1, 2)
        .store_uint(32, 9)
        .store_uint(log::subscription_created, 32);

    return begin_cell()
        .store_uint(0xC, 4)
        .store_builder(log_addr)
        .store_uint(0, 64 + 32 + 1)
        .store_uint(query_id, 64)
        .store_uint(index, 64)
        .store_slice(owner_addr)
    .end_cell();
}

slice calculate_subscription_address(int wc, cell code, int index) {
    var state_init = assemble_stateinit(code, assemble_subscription_data(index));
    return calculate_address_from_stateinit(wc, state_init).end_cell().begin_parse();
}

cell assemble_deploy_and_init_msg(int query_id, cell state_init, slice owner_addr) inline {
    return begin_cell()
        .store_uint(0x18, 6)
        .store_builder(calculate_address_from_stateinit(WORKCHAIN_ID, state_init))
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell()
            .store_uint(op::init, 32)
            .store_uint(query_id, 64)
            .store_slice(owner_addr)
            .store_slice(storage::manager)
            .store_coins(storage::subscription_fee)
            .store_coins(storage::periodic_fee)
            .store_uint(storage::fee_period, 32)
        .end_cell())
    .end_cell();
}

cell assemble_update_authority_msg(int query_id, slice subscription_addr) inline {
    return begin_cell()
        .store_uint(0x18, 6)
        .store_slice(subscription_addr)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::update_authority, 32)
        .store_uint(query_id, 64)
        .store_slice(storage::manager)
    .end_cell();
}

;; External Messages

() send_log_subscription_created(int query_id, int index, slice owner_addr) impure inline {
    send_raw_message(assemble_subscription_created_log(query_id, index, owner_addr), 1);
}

;; Internal Messages
() send_deploy_init_msg(int query_id, cell state_init, slice owner_addr) impure inline {
    send_raw_message(assemble_deploy_and_init_msg(query_id, state_init, owner_addr), 64);
}

() send_update_subscription_authority_msg(int query_id, slice subscription_addr) impure inline {
    send_raw_message(assemble_update_authority_msg(query_id, subscription_addr), 64);
}

;; Storage (C4) manipulation functions
() load_init_data() impure {
    var ds = get_data().begin_parse();
    storage::index = ds~load_uint(64);
    throw_unless(error::init_true, ds.slice_empty?());
}

() load_data() impure {
    var ds = get_data().begin_parse();
    storage::index = ds~load_uint(64);
    throw_if(error::init_false, ds.slice_empty?());
    storage::metadata = ds~load_ref();
    storage::manager = ds~load_msg_addr();
    storage::subscription_number = ds~load_uint(64);
    storage::subscription_fee = ds~load_coins();
    storage::periodic_fee = ds~load_coins();
    storage::fee_period = ds~load_uint(32);
    storage::subscription_code = ds~load_ref();
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(storage::index, 64)
        .store_ref(storage::metadata)
        .store_slice(storage::manager)
        .store_uint(storage::subscription_number, 64)
        .store_coins(storage::subscription_fee)
        .store_coins(storage::periodic_fee)
        .store_uint(storage::fee_period, 32)
        .store_ref(storage::subscription_code)
    .end_cell());
}

;; OP functions
() init(slice sender_addr, int query_id, slice msg_body_content) impure inline {
    load_init_data();

    storage::metadata = msg_body_content~load_ref();
    storage::manager = msg_body_content~load_msg_addr();
    storage::subscription_number = 0; ;; subscription counter starts at 0
    storage::subscription_fee = msg_body_content~load_coins();
    storage::periodic_fee = msg_body_content~load_coins();
    storage::fee_period = msg_body_content~load_uint(32);
    storage::subscription_code = msg_body_content~load_ref();

    save_data();

    raw_reserve(MIN_TON_RESERVE, 0);

    reply(query_id, sender_addr, 0, 128);
}

() subscribe(slice sender_addr, int query_id, slice msg_body_content) impure inline {
    ;; sender_addr workchain should be equal to WORKCHAIN_ID constant
    force_chain(WORKCHAIN_ID, sender_addr);

    ;; prepare Subscription contract stateinit
    var state_init = assemble_stateinit(
        storage::subscription_code,
        assemble_subscription_data(storage::subscription_number)
    );
    storage::subscription_number += 1;

    send_deploy_init_msg(query_id, state_init, sender_addr);

    save_data();
}

() configure(slice sender_addr, int query_id, slice msg_body_content) impure inline {
    throw_unless(error::not_admin, sender_addr.equal_slice_bits(storage::manager));

    storage::subscription_fee = msg_body_content~load_coins();
    storage::periodic_fee = msg_body_content~load_coins();
    storage::fee_period = msg_body_content~load_uint(32);

    reply(query_id, sender_addr, 0, 64);

    save_data();
}

() change_manager(slice sender_addr, int query_id, slice msg_body_content) impure inline {
    throw_unless(error::not_admin, sender_addr.equal_slice_bits(storage::manager));

    storage::manager = msg_body_content~load_msg_addr();

    reply(query_id, sender_addr, 0, 64);
    
    save_data();
}

() update_subscription_authority(slice sender_addr, int query_id, slice msg_body_content) impure inline {
    throw_unless(error::not_admin, sender_addr.equal_slice_bits(storage::manager));

    int index = msg_body_content~load_uint(64);
    slice subscription_addr = calculate_subscription_address(
        WORKCHAIN_ID,
        storage::subscription_code,
        index
    );

    send_update_subscription_authority_msg(query_id, subscription_addr);
}

() log_subscription_created(slice sender_addr, int query_id, slice msg_body_content) impure inline {
    var subscription_number = msg_body_content~load_uint(64);
    slice user_subscription = calculate_subscription_address(
        WORKCHAIN_ID,
        storage::subscription_code,
        subscription_number
    );

    throw_unless(error::not_subscription, sender_addr.equal_slice_bits(user_subscription));

    slice subscription_owner = msg_body_content~load_msg_addr();
    send_log_subscription_created(query_id, subscription_number, subscription_owner);

    reply(query_id, subscription_owner, 0, 64);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; receive ton transfers (simple transfer without message)
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages (just receive excedents)
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    slice sender_addr = cs~load_msg_addr();

    if (op == op::init) {
        init(sender_addr, query_id, in_msg_body);
        return ();
    }

    load_data(); ;; load storage variables

    if (op == op::log_subscription_created) {
        log_subscription_created(sender_addr, query_id, in_msg_body);
        return ();
    }

    if (op == op::subscribe) {
        subscribe(sender_addr, query_id, in_msg_body);
        return ();
    }

    if (op == op::configure) {
        configure(sender_addr, query_id, in_msg_body);
        return ();
    }

    if (op == op::change_manager) {
        change_manager(sender_addr, query_id, in_msg_body);
        return ();
    }

    if (op == op::update_subscription_authority) {
        update_subscription_authority(sender_addr, query_id, in_msg_body);
        return ();
    }

    throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

(int, cell, slice, int, int, int, int, cell) get_subscription_master_data() method_id {
    load_data();
    return (
        storage::index,
        storage::metadata,
        storage::manager,
        storage::subscription_number,
        storage::subscription_fee,
        storage::periodic_fee,
        storage::fee_period,
        storage::subscription_code
    );
}

int is_init() method_id {
    var ds = get_data().begin_parse();
    return ~ ds.slice_refs_empty?();
}

int get_id() method_id {
    load_data();
    return storage::index;
}

(int, int, int) get_fee_config() method_id {
    load_data();
    return (
        storage::subscription_fee,
        storage::periodic_fee,
        storage::fee_period
    );
}

slice get_manager() method_id {
    load_data();
    return storage::manager;
}

int get_subscription_number() method_id {
    load_data();
    return storage::subscription_number;
}

int get_subscription_code_hash() method_id {
    load_data();
    return cell_hash(storage::subscription_code);
}

cell get_subscription_metadata() method_id {
    load_data();
    return storage::metadata;
}

slice get_subscription(int index) method_id {
    load_data();
    return calculate_subscription_address(WORKCHAIN_ID, storage::subscription_code, index);
}